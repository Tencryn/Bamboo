From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tencryn <41876297+Tencryn@users.noreply.github.com>
Date: Mon, 20 Dec 2021 03:18:22 +0000
Subject: [PATCH] Nerf Stuck Villagers


diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java b/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
index afbb2acd27416c801af3d718850b82a170734cd3..26140ffe726bf8754671ce31a1c51c5ea607a8e7 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
@@ -18,6 +18,7 @@ import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.MemoryStatus;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiType;
+import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.level.pathfinder.Path;
 
 public class AcquirePoi extends Behavior<PathfinderMob> {
@@ -83,9 +84,14 @@ public class AcquirePoi extends Behavior<PathfinderMob> {
                 return true;
             }
         };
+        // Bamboo start - shorten range / distance when nerfed
+        int range = ((Villager)entity).isNerfed() ? 1 : 48;
+        int mDist = ((Villager)entity).isNerfed() ? 2 : 48*48;
+        // Bamboo end - shorten range / distance when nerfed
+
         // Paper start - optimise POI access
         java.util.List<BlockPos> poiposes = new java.util.ArrayList<>();
-        io.papermc.paper.util.PoiAccess.findNearestPoiPositions(poiManager, this.poiType.getPredicate(), predicate, entity.blockPosition(), 48, 48*48, PoiManager.Occupancy.HAS_SPACE, false, 5, poiposes);
+        io.papermc.paper.util.PoiAccess.findNearestPoiPositions(poiManager, this.poiType.getPredicate(), predicate, entity.blockPosition(), range, mDist, PoiManager.Occupancy.HAS_SPACE, false, 5, poiposes); // Bamboo
         Set<BlockPos> set = new java.util.HashSet<>(poiposes);
         // Paper end - optimise POI access
         Path path = entity.getNavigation().createPath(set, this.poiType.getValidRange());
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java
index 1763764662e061d1f8de74b65de7fb5cc1caac5c..90f7c82c28cc887127fc57b08319d93f8e598fe2 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java
@@ -18,6 +18,20 @@ import net.minecraft.world.entity.npc.VillagerProfession;
 public class VillagerGoalPackages {
     private static final float STROLL_SPEED_MODIFIER = 0.4F;
 
+    public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getNerfedCorePackage(VillagerProfession profession, float speed) {
+        return ImmutableList.of(
+            Pair.of(0, new LookAtTargetSink(45, 90)),
+            Pair.of(0, new ValidateNearbyPoi(profession.getJobPoiType(), MemoryModuleType.JOB_SITE)),
+            Pair.of(0, new ValidateNearbyPoi(profession.getJobPoiType(), MemoryModuleType.POTENTIAL_JOB_SITE)),
+            //Pair.of(2, new PoiCompetitorScan(profession)),
+            Pair.of(3, new LookAndFollowTradingPlayerSink(speed)),
+            Pair.of(6, new AcquirePoi(profession.getJobPoiType(), MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, true, Optional.empty())),
+            Pair.of(8, new YieldJobSite(speed)),
+            Pair.of(10, new AssignProfessionFromJobSite()),
+            Pair.of(10, new ResetProfession())
+        );
+    }
+
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getCorePackage(VillagerProfession profession, float speed) {
         return ImmutableList.of(Pair.of(0, new Swim(0.8F)), Pair.of(0, new InteractWithDoor()), Pair.of(0, new LookAtTargetSink(45, 90)), Pair.of(0, new VillagerPanicTrigger()), Pair.of(0, new WakeUp()), Pair.of(0, new ReactToBell()), Pair.of(0, new SetRaidStatus()), Pair.of(0, new ValidateNearbyPoi(profession.getJobPoiType(), MemoryModuleType.JOB_SITE)), Pair.of(0, new ValidateNearbyPoi(profession.getJobPoiType(), MemoryModuleType.POTENTIAL_JOB_SITE)), Pair.of(1, new MoveToTargetSink()), Pair.of(2, new PoiCompetitorScan(profession)), Pair.of(3, new LookAndFollowTradingPlayerSink(speed)), Pair.of(5, new GoToWantedItem(speed, false, 4)), Pair.of(6, new AcquirePoi(profession.getJobPoiType(), MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, true, Optional.empty())), Pair.of(7, new GoToPotentialJobSite(speed)), Pair.of(8, new YieldJobSite(speed)), Pair.of(10, new AcquirePoi(PoiType.HOME, MemoryModuleType.HOME, false, Optional.of((byte)14))), Pair.of(10, new AcquirePoi(PoiType.MEETING, MemoryModuleType.MEETING_POINT, true, Optional.of((byte)14))), Pair.of(10, new AssignProfessionFromJobSite()), Pair.of(10, new ResetProfession()));
     }
@@ -50,6 +64,17 @@ public class VillagerGoalPackages {
         return ImmutableList.of(Pair.of(2, new RunOne<>(ImmutableList.of(Pair.of(new StrollAroundPoi(MemoryModuleType.MEETING_POINT, 0.4F, 40), 2), Pair.of(new SocializeAtBell(), 2)))), Pair.of(10, new ShowTradesToPlayer(400, 1600)), Pair.of(10, new SetLookAndInteract(EntityType.PLAYER, 4)), Pair.of(2, new SetWalkTargetFromBlockMemory(MemoryModuleType.MEETING_POINT, speed, 6, 100, 200)), Pair.of(3, new GiveGiftToHero(100)), Pair.of(3, new ValidateNearbyPoi(PoiType.MEETING, MemoryModuleType.MEETING_POINT)), Pair.of(3, new GateBehavior<>(ImmutableMap.of(), ImmutableSet.of(MemoryModuleType.INTERACTION_TARGET), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.RUN_ONE, ImmutableList.of(Pair.of(new TradeWithVillager(), 1)))), getFullLookBehavior(), Pair.of(99, new UpdateActivityFromSchedule()));
     }
 
+    public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getNerfedIdlePackage(VillagerProfession profession, float speed) {
+        return ImmutableList.of(
+            //Pair.of(2, new DoNothing(30, 60)),
+            Pair.of(3, new GiveGiftToHero(100)),
+            Pair.of(3, new SetLookAndInteract(EntityType.PLAYER, 4)),
+            Pair.of(3, new ShowTradesToPlayer(400, 1600)),
+            getMinimalLookBehavior(),
+            Pair.of(99, new UpdateActivityFromSchedule())
+        );
+    }
+
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getIdlePackage(VillagerProfession profession, float speed) {
         return ImmutableList.of(Pair.of(2, new RunOne<>(ImmutableList.of(Pair.of(InteractWith.of(EntityType.VILLAGER, 8, MemoryModuleType.INTERACTION_TARGET, speed, 2), 2), Pair.of(new InteractWith<>(EntityType.VILLAGER, 8, AgeableMob::canBreed, AgeableMob::canBreed, MemoryModuleType.BREED_TARGET, speed, 2), 1), Pair.of(InteractWith.of(EntityType.CAT, 8, MemoryModuleType.INTERACTION_TARGET, speed, 2), 1), Pair.of(new VillageBoundRandomStroll(speed), 1), Pair.of(new SetWalkTargetFromLookTarget(speed, 2), 1), Pair.of(new JumpOnBed(speed), 1), Pair.of(new DoNothing(30, 60), 1)))), Pair.of(3, new GiveGiftToHero(100)), Pair.of(3, new SetLookAndInteract(EntityType.PLAYER, 4)), Pair.of(3, new ShowTradesToPlayer(400, 1600)), Pair.of(3, new GateBehavior<>(ImmutableMap.of(), ImmutableSet.of(MemoryModuleType.INTERACTION_TARGET), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.RUN_ONE, ImmutableList.of(Pair.of(new TradeWithVillager(), 1)))), Pair.of(3, new GateBehavior<>(ImmutableMap.of(), ImmutableSet.of(MemoryModuleType.BREED_TARGET), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.RUN_ONE, ImmutableList.of(Pair.of(new VillagerMakeLove(), 1)))), getFullLookBehavior(), Pair.of(99, new UpdateActivityFromSchedule()));
     }
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index e95210c6deee2c6431ef01d23953174465f199e0..1f42998f04a03d2687d6803ab09beb57a7f512aa 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -138,6 +138,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         return villageplacetype == PoiType.MEETING;
     });
     private final int brainTickOffset; // Purpur
+    private boolean nerfed = false; // Bamboo
 
     public Villager(EntityType<? extends Villager> entityType, Level world) {
         this(entityType, world, VillagerType.PLAINS);
@@ -186,6 +187,36 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
     // Purpur end
 
+    // Bamboo start
+    public boolean isNerfed() {
+        if (net.rocryn.bamboo.BambooConfig.villagerNerfEnabled) {
+            if ((level.getGameTime() + brainTickOffset) % net.rocryn.bamboo.BambooConfig.villagerNerfCheck == 0) {
+                this.nerfed = !canTravelFrom(blockPosition().above());
+            }
+        } else {
+            this.nerfed = false;
+        }
+
+        return this.nerfed;
+    }
+
+    private boolean canTravelFrom(BlockPos pos) {
+        return canTravelTo(pos.east()) || canTravelTo(pos.west()) || canTravelTo(pos.north()) || canTravelTo(pos.south());
+    }
+
+    private boolean canTravelTo(BlockPos pos) {
+        net.minecraft.world.level.block.Block block = this.level.getBlockIfLoaded(pos);
+
+        if (block != null) {
+            org.bukkit.Material m = org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(block);
+
+            return !m.isSolid() || org.bukkit.Tag.DOORS.isTagged(m) || org.bukkit.Tag.FENCE_GATES.isTagged(m);
+        }
+
+        return false;
+    }
+    // Bamboo end
+
     @Override
     public Brain<Villager> getBrain() {
         return (Brain<Villager>) super.getBrain(); // CraftBukkit - decompile error
@@ -223,14 +254,20 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
             brain.addActivityWithConditions(Activity.WORK, VillagerGoalPackages.getWorkPackage(villagerprofession, 0.5F, this.level.purpurConfig.villagerClericsFarmWarts), ImmutableSet.of(Pair.of(MemoryModuleType.JOB_SITE, MemoryStatus.VALUE_PRESENT))); // Purpur
         }
 
-        brain.addActivity(Activity.CORE, VillagerGoalPackages.getCorePackage(villagerprofession, 0.5F));
-        brain.addActivityWithConditions(Activity.MEET, VillagerGoalPackages.getMeetPackage(villagerprofession, 0.5F), ImmutableSet.of(Pair.of(MemoryModuleType.MEETING_POINT, MemoryStatus.VALUE_PRESENT)));
-        brain.addActivity(Activity.REST, VillagerGoalPackages.getRestPackage(villagerprofession, 0.5F));
-        brain.addActivity(Activity.IDLE, VillagerGoalPackages.getIdlePackage(villagerprofession, 0.5F));
-        brain.addActivity(Activity.PANIC, VillagerGoalPackages.getPanicPackage(villagerprofession, 0.5F));
-        brain.addActivity(Activity.PRE_RAID, VillagerGoalPackages.getPreRaidPackage(villagerprofession, 0.5F));
-        brain.addActivity(Activity.RAID, VillagerGoalPackages.getRaidPackage(villagerprofession, 0.5F));
-        brain.addActivity(Activity.HIDE, VillagerGoalPackages.getHidePackage(villagerprofession, 0.5F));
+        if (!this.isNerfed()) {
+            brain.addActivity(Activity.CORE, VillagerGoalPackages.getCorePackage(villagerprofession, 0.5F));
+            brain.addActivityWithConditions(Activity.MEET, VillagerGoalPackages.getMeetPackage(villagerprofession, 0.5F), ImmutableSet.of(Pair.of(MemoryModuleType.MEETING_POINT, MemoryStatus.VALUE_PRESENT)));
+            brain.addActivity(Activity.REST, VillagerGoalPackages.getRestPackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.IDLE, VillagerGoalPackages.getIdlePackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.PANIC, VillagerGoalPackages.getPanicPackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.PRE_RAID, VillagerGoalPackages.getPreRaidPackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.RAID, VillagerGoalPackages.getRaidPackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.HIDE, VillagerGoalPackages.getHidePackage(villagerprofession, 0.5F));
+        } else {
+            brain.addActivity(Activity.CORE, VillagerGoalPackages.getNerfedCorePackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.IDLE, VillagerGoalPackages.getNerfedIdlePackage(villagerprofession, 0.5F));
+        }
+
         brain.setCoreActivities(ImmutableSet.of(Activity.CORE));
         brain.setDefaultActivity(Activity.IDLE);
         brain.setActiveActivityIfPossible(Activity.IDLE);
@@ -280,6 +317,13 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     protected void customServerAiStep() { mobTick(false); }
     protected void mobTick(boolean inactive) {
         this.level.getProfiler().push("villagerBrain");
+        // Bamboo start
+        if (this.nerfed != this.isNerfed()) {
+            if (this.level instanceof ServerLevel) {
+                this.refreshBrain((ServerLevel) this.level);
+            }
+        }
+        // Bamboo end
         // Purpur start
         boolean tick = (level.getGameTime() + brainTickOffset) % level.purpurConfig.villagerBrainTicks == 0;
         if (((ServerLevel) level).getServer().lagging ? tick : level.purpurConfig.villagerUseBrainTicksOnlyWhenLagging || tick)
diff --git a/src/main/java/net/rocryn/bamboo/BambooConfig.java b/src/main/java/net/rocryn/bamboo/BambooConfig.java
index 61187b99639193ecf9b321286eed3e964110fa7b..ebdcf3ec1f30a6068c3f5102d88cc3930fc4d173 100644
--- a/src/main/java/net/rocryn/bamboo/BambooConfig.java
+++ b/src/main/java/net/rocryn/bamboo/BambooConfig.java
@@ -145,4 +145,10 @@ public class BambooConfig {
 
     public static Boolean sheepGriefGrass = true;
     private static void sheepGriefGrass() { sheepGriefGrass = getBoolean("animals.sheep.grief-grass", sheepGriefGrass); }
+
+    public static Boolean villagerNerfEnabled = false;
+    public static int villagerNerfCheck = 60;
+
+    private static void villagerNerfEnabled() { villagerNerfEnabled = getBoolean("villager.nerf.enabled", villagerNerfEnabled); }
+    private static void villagerNerfCheck() { villagerNerfCheck = getInt("villager.nerf.check-interval", villagerNerfCheck); }
 }
