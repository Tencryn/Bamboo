From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tencryn <41876297+Tencryn@users.noreply.github.com>
Date: Mon, 20 Dec 2021 03:18:22 +0000
Subject: [PATCH] Nerf Stuck Villagers


diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java b/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
index bf3b8ccb3e031e0ad24cd51e28ea8cbd4f8a8030..5ca7cf30d737c8b585a8f26e2b47d38ce643cc23 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
@@ -22,6 +22,7 @@ import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.MemoryStatus;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiType;
+import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.level.pathfinder.Path;
 
 public class AcquirePoi extends Behavior<PathfinderMob> {
@@ -88,9 +89,10 @@ public class AcquirePoi extends Behavior<PathfinderMob> {
                 return true;
             }
         };
+        int radius = ((Villager)entity).isNerfed() ? 1 : 48; // Bamboo
         // Paper start - optimise POI access
         java.util.List<Pair<Holder<PoiType>, BlockPos>> poiposes = new java.util.ArrayList<>();
-        io.papermc.paper.util.PoiAccess.findNearestPoiPositions(poiManager, this.poiType, predicate, entity.blockPosition(), 48, 48*48, PoiManager.Occupancy.HAS_SPACE, false, 5, poiposes);
+        io.papermc.paper.util.PoiAccess.findNearestPoiPositions(poiManager, this.poiType, predicate, entity.blockPosition(), radius, radius*radius, PoiManager.Occupancy.HAS_SPACE, false, 5, poiposes); // Bamboo
         Set<Pair<Holder<PoiType>, BlockPos>> set = new java.util.HashSet<>(poiposes);
         // Paper end - optimise POI access
         Path path = findPathToPois(entity, set);
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java
index ba17618784b76384737e876d790eafe76a7cec8d..3d8323b3ca6db62baaaf1a8b62ef4680b09578ad 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java
@@ -25,6 +25,21 @@ public class VillagerGoalPackages {
             return holder.is(PoiTypes.MEETING);
         }, MemoryModuleType.MEETING_POINT, true, Optional.of((byte)14))), Pair.of(10, new AssignProfessionFromJobSite()), Pair.of(10, new ResetProfession()));
     }
+    // Bamboo start
+    public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getNerfedCorePackage(VillagerProfession profession, float speed) {
+        return ImmutableList.of(
+            Pair.of(0, new LookAtTargetSink(45, 90)),
+            Pair.of(0, new ValidateNearbyPoi(profession.heldJobSite(), MemoryModuleType.JOB_SITE)),
+            Pair.of(0, new ValidateNearbyPoi(profession.acquirableJobSite(), MemoryModuleType.POTENTIAL_JOB_SITE)),
+            //Pair.of(2, new PoiCompetitorScan(profession)),
+            Pair.of(3, new LookAndFollowTradingPlayerSink(speed)),
+            Pair.of(6, new AcquirePoi(profession.acquirableJobSite(), MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, true, Optional.empty())),
+            Pair.of(8, new YieldJobSite(speed)),
+            Pair.of(10, new AssignProfessionFromJobSite()),
+            Pair.of(10, new ResetProfession())
+        );
+    }
+    // Bamboo end
 
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getWorkPackage(VillagerProfession profession, float speed) {
         // Purpur start
@@ -41,6 +56,35 @@ public class VillagerGoalPackages {
 
         return ImmutableList.of(getMinimalLookBehavior(), Pair.of(5, new RunOne<>(ImmutableList.of(Pair.of(workAtPoi, 7), Pair.of(new StrollAroundPoi(MemoryModuleType.JOB_SITE, 0.4F, 4), 2), Pair.of(new StrollToPoi(MemoryModuleType.JOB_SITE, 0.4F, 1, 10), 5), Pair.of(new StrollToPoiList(MemoryModuleType.SECONDARY_JOB_SITE, speed, 1, 6, MemoryModuleType.JOB_SITE), 5), Pair.of(new HarvestFarmland(), profession == VillagerProfession.FARMER ? 2 : 5), Pair.of(new UseBonemeal(), profession == VillagerProfession.FARMER ? 4 : 7)))), Pair.of(10, new ShowTradesToPlayer(400, 1600)), Pair.of(10, new SetLookAndInteract(EntityType.PLAYER, 4)), Pair.of(2, new SetWalkTargetFromBlockMemory(MemoryModuleType.JOB_SITE, speed, 9, 100, 1200)), Pair.of(3, new GiveGiftToHero(100)), Pair.of(99, new UpdateActivityFromSchedule()));
     }
+    // Bamboo start
+    public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getNerfedWorkPackage(VillagerProfession profession, float speed, boolean clericsFarmWarts) {
+        WorkAtPoi workAtPoi;
+        if (profession == VillagerProfession.FARMER || (clericsFarmWarts && profession == VillagerProfession.CLERIC)) { // Purpur
+            workAtPoi = new WorkAtComposter();
+        } else {
+            workAtPoi = new WorkAtPoi();
+        }
+
+        return ImmutableList.of(
+            getMinimalLookBehavior(),
+            Pair.of(5, new RunOne<>(
+                ImmutableList.of(
+                    Pair.of(workAtPoi, 7),
+                    // Pair.of(new StrollAroundPoi(MemoryModuleType.JOB_SITE, 0.4F, 4), 2),
+                    // Pair.of(new StrollToPoi(MemoryModuleType.JOB_SITE, 0.4F, 1, 10), 5),
+                    // Pair.of(new StrollToPoiList(MemoryModuleType.SECONDARY_JOB_SITE, speed, 1, 6, MemoryModuleType.JOB_SITE), 5),
+                    Pair.of(new HarvestFarmland(), profession == VillagerProfession.FARMER ? 2 : 5),
+                    Pair.of(new UseBonemeal(), profession == VillagerProfession.FARMER ? 4 : 7)
+                )
+            )),
+            Pair.of(10, new ShowTradesToPlayer(400, 1600)),
+            Pair.of(10, new SetLookAndInteract(EntityType.PLAYER, 4)),
+            // Pair.of(2, new SetWalkTargetFromBlockMemory(MemoryModuleType.JOB_SITE, speed, 9, 100, 1200)),
+            Pair.of(3, new GiveGiftToHero(100)),
+            Pair.of(99, new UpdateActivityFromSchedule())
+        );
+    }
+    // Bamboo end
 
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getPlayPackage(float speed) {
         return ImmutableList.of(Pair.of(0, new MoveToTargetSink(80, 120)), getFullLookBehavior(), Pair.of(5, new PlayTagWithOtherKids()), Pair.of(5, new RunOne<>(ImmutableMap.of(MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryStatus.VALUE_ABSENT), ImmutableList.of(Pair.of(InteractWith.of(EntityType.VILLAGER, 8, MemoryModuleType.INTERACTION_TARGET, speed, 2), 2), Pair.of(InteractWith.of(EntityType.CAT, 8, MemoryModuleType.INTERACTION_TARGET, speed, 2), 1), Pair.of(new VillageBoundRandomStroll(speed), 1), Pair.of(new SetWalkTargetFromLookTarget(speed, 2), 1), Pair.of(new JumpOnBed(speed), 2), Pair.of(new DoNothing(20, 40), 2)))), Pair.of(99, new UpdateActivityFromSchedule()));
@@ -61,6 +105,18 @@ public class VillagerGoalPackages {
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getIdlePackage(VillagerProfession profession, float speed) {
         return ImmutableList.of(Pair.of(2, new RunOne<>(ImmutableList.of(Pair.of(InteractWith.of(EntityType.VILLAGER, 8, MemoryModuleType.INTERACTION_TARGET, speed, 2), 2), Pair.of(new InteractWith<>(EntityType.VILLAGER, 8, AgeableMob::canBreed, AgeableMob::canBreed, MemoryModuleType.BREED_TARGET, speed, 2), 1), Pair.of(InteractWith.of(EntityType.CAT, 8, MemoryModuleType.INTERACTION_TARGET, speed, 2), 1), Pair.of(new VillageBoundRandomStroll(speed), 1), Pair.of(new SetWalkTargetFromLookTarget(speed, 2), 1), Pair.of(new JumpOnBed(speed), 1), Pair.of(new DoNothing(30, 60), 1)))), Pair.of(3, new GiveGiftToHero(100)), Pair.of(3, new SetLookAndInteract(EntityType.PLAYER, 4)), Pair.of(3, new ShowTradesToPlayer(400, 1600)), Pair.of(3, new GateBehavior<>(ImmutableMap.of(), ImmutableSet.of(MemoryModuleType.INTERACTION_TARGET), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.RUN_ONE, ImmutableList.of(Pair.of(new TradeWithVillager(), 1)))), Pair.of(3, new GateBehavior<>(ImmutableMap.of(), ImmutableSet.of(MemoryModuleType.BREED_TARGET), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.RUN_ONE, ImmutableList.of(Pair.of(new VillagerMakeLove(), 1)))), getFullLookBehavior(), Pair.of(99, new UpdateActivityFromSchedule()));
     }
+    // Bamboo start
+    public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getNerfedIdlePackage(VillagerProfession profession, float speed) {
+        return ImmutableList.of(
+            Pair.of(2, new DoNothing(30, 60)),
+            Pair.of(3, new GiveGiftToHero(100)),
+            Pair.of(3, new SetLookAndInteract(EntityType.PLAYER, 4)),
+            Pair.of(3, new ShowTradesToPlayer(400, 1600)),
+            getMinimalLookBehavior(),
+            Pair.of(99, new UpdateActivityFromSchedule())
+        );
+    }
+    // Bamboo end
 
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getPanicPackage(VillagerProfession profession, float speed) {
         float f = speed * 1.5F;
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 20668d53625ec88ba3eb2a655ad3f6bc4fb0fd0e..cb7ca2719def933581e907256530747726d2a7d9 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -87,6 +87,7 @@ import net.minecraft.world.item.trading.MerchantOffer;
 import net.minecraft.world.item.trading.MerchantOffers;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
+import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.phys.AABB;
 import org.slf4j.Logger;
 
@@ -142,6 +143,8 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     private final int brainTickOffset; // Purpur
     private boolean isLobotomized = false; public boolean isLobotomized() { return this.isLobotomized; } // Purpur
     private int notLobotomizedCount = 0; // Purpur
+    private boolean isNerfed = false; public boolean isNerfed() { return this.isNerfed; } // Bamboo
+    private int notNerfedCount = 0; // Bamboo
 
     public long nextGolemPanic = -1; // Pufferfish
 
@@ -243,6 +246,45 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
     // Purpur end
 
+    // Bamboo start
+    public boolean checkNerfed() {
+        int interval = net.rocryn.bamboo.BambooConfig.villagerNerfCheck;
+
+        if (this.notNerfedCount > 3) {
+            interval *= 2;
+        }
+
+        if ((this.level.getGameTime() + brainTickOffset) % interval == 0) {
+            boolean temp = false;
+
+            if (net.rocryn.bamboo.BambooConfig.villagerNerfRequiresEmeraldBlock) {
+                temp = hasEmeraldBlockBelow(new BlockPos(getX(), getY() - 1D, getZ()));
+            }
+
+            this.isNerfed = temp || !canTravelFrom(new BlockPos(getX(), getY() + 0.0625D, getZ()));
+
+            if (this.isNerfed) {
+                this.notNerfedCount = 0;
+            } else {
+                this.notNerfedCount++;
+            }
+        }
+
+        return this.isNerfed;
+    }
+
+    public boolean hasEmeraldBlockBelow(BlockPos pos) {
+        net.minecraft.world.level.block.state.BlockState state = this.level.getBlockStateIfLoaded(pos);
+        if (state == null) {
+            // chunk not loaded
+            return false;
+        }
+        net.minecraft.world.level.block.Block block = state.getBlock();
+
+        return block == Blocks.EMERALD_BLOCK;
+    }
+    // Bamboo end
+
     @Override
     public Brain<Villager> getBrain() {
         return (Brain<Villager>) super.getBrain(); // CraftBukkit - decompile error
@@ -269,30 +311,49 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         this.registerBrainGoals(this.getBrain());
     }
 
+    // Bamboo start
     private void registerBrainGoals(Brain<Villager> brain) {
         VillagerProfession villagerprofession = this.getVillagerData().getProfession();
 
-        if (this.isBaby()) {
-            brain.setSchedule(Schedule.VILLAGER_BABY);
-            brain.addActivity(Activity.PLAY, VillagerGoalPackages.getPlayPackage(0.5F));
+        if (this.isNerfed) {
+            this.registerNerfedBrainGoals(brain, villagerprofession);
         } else {
-            brain.setSchedule(Schedule.VILLAGER_DEFAULT);
-            brain.addActivityWithConditions(Activity.WORK, VillagerGoalPackages.getWorkPackage(villagerprofession, 0.5F, this.level.purpurConfig.villagerClericsFarmWarts), ImmutableSet.of(Pair.of(MemoryModuleType.JOB_SITE, MemoryStatus.VALUE_PRESENT))); // Purpur
+            if (this.isBaby()) {
+                brain.setSchedule(Schedule.VILLAGER_BABY);
+                brain.addActivity(Activity.PLAY, VillagerGoalPackages.getPlayPackage(0.5F));
+            } else {
+                brain.setSchedule(Schedule.VILLAGER_DEFAULT);
+                brain.addActivityWithConditions(Activity.WORK, VillagerGoalPackages.getWorkPackage(villagerprofession, 0.5F, this.level.purpurConfig.villagerClericsFarmWarts), ImmutableSet.of(Pair.of(MemoryModuleType.JOB_SITE, MemoryStatus.VALUE_PRESENT))); // Purpur
+            }
+
+            brain.addActivity(Activity.CORE, VillagerGoalPackages.getCorePackage(villagerprofession, 0.5F));
+            brain.addActivityWithConditions(Activity.MEET, VillagerGoalPackages.getMeetPackage(villagerprofession, 0.5F), ImmutableSet.of(Pair.of(MemoryModuleType.MEETING_POINT, MemoryStatus.VALUE_PRESENT)));
+            brain.addActivity(Activity.REST, VillagerGoalPackages.getRestPackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.IDLE, VillagerGoalPackages.getIdlePackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.PANIC, VillagerGoalPackages.getPanicPackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.PRE_RAID, VillagerGoalPackages.getPreRaidPackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.RAID, VillagerGoalPackages.getRaidPackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.HIDE, VillagerGoalPackages.getHidePackage(villagerprofession, 0.5F));
         }
 
-        brain.addActivity(Activity.CORE, VillagerGoalPackages.getCorePackage(villagerprofession, 0.5F));
-        brain.addActivityWithConditions(Activity.MEET, VillagerGoalPackages.getMeetPackage(villagerprofession, 0.5F), ImmutableSet.of(Pair.of(MemoryModuleType.MEETING_POINT, MemoryStatus.VALUE_PRESENT)));
-        brain.addActivity(Activity.REST, VillagerGoalPackages.getRestPackage(villagerprofession, 0.5F));
-        brain.addActivity(Activity.IDLE, VillagerGoalPackages.getIdlePackage(villagerprofession, 0.5F));
-        brain.addActivity(Activity.PANIC, VillagerGoalPackages.getPanicPackage(villagerprofession, 0.5F));
-        brain.addActivity(Activity.PRE_RAID, VillagerGoalPackages.getPreRaidPackage(villagerprofession, 0.5F));
-        brain.addActivity(Activity.RAID, VillagerGoalPackages.getRaidPackage(villagerprofession, 0.5F));
-        brain.addActivity(Activity.HIDE, VillagerGoalPackages.getHidePackage(villagerprofession, 0.5F));
         brain.setCoreActivities(ImmutableSet.of(Activity.CORE));
         brain.setDefaultActivity(Activity.IDLE);
         brain.setActiveActivityIfPossible(Activity.IDLE);
         brain.updateActivityFromSchedule(this.level.getDayTime(), this.level.getGameTime());
     }
+    private void registerNerfedBrainGoals(Brain<Villager> brain, VillagerProfession villagerprofession) {
+        if (this.isBaby()) {
+            brain.setSchedule(Schedule.VILLAGER_BABY);
+            brain.addActivity(Activity.PLAY, VillagerGoalPackages.getPlayPackage(0.5F));
+        } else {
+            brain.setSchedule(Schedule.VILLAGER_DEFAULT);
+            brain.addActivityWithConditions(Activity.WORK, VillagerGoalPackages.getNerfedWorkPackage(villagerprofession, 0.5F, this.level.purpurConfig.villagerClericsFarmWarts), ImmutableSet.of(Pair.of(MemoryModuleType.JOB_SITE, MemoryStatus.VALUE_PRESENT))); // Purpur
+        }
+
+        brain.addActivity(Activity.CORE, VillagerGoalPackages.getNerfedCorePackage(villagerprofession, 0.5F));
+        brain.addActivity(Activity.IDLE, VillagerGoalPackages.getNerfedIdlePackage(villagerprofession, 0.5F));
+    }
+    // Bamboo end
 
     @Override
     protected void ageBoundaryReached() {
@@ -349,6 +410,13 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         // Purpur end
         // Pufferfish start
         if (!inactive) {
+            // Bamboo start
+            if (net.rocryn.bamboo.BambooConfig.villagerNerfEnabled && this.isNerfed != this.checkNerfed()) {
+                if (this.level instanceof ServerLevel) {
+                    this.refreshBrain((ServerLevel) this.level);
+                }
+            }
+            // Bamboo end
             // Purpur start
             boolean tick = (level.getGameTime() + brainTickOffset) % level.purpurConfig.villagerBrainTicks == 0;
             if (((ServerLevel) level).getServer().lagging ? tick : level.purpurConfig.villagerUseBrainTicksOnlyWhenLagging || tick)
@@ -653,7 +721,11 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         if (this.assignProfessionWhenSpawned) {
             nbt.putBoolean("AssignProfessionWhenSpawned", true);
         }
-
+        // Bamboo start
+        if (this.isNerfed) {
+            nbt.putBoolean("Bamboo.Nerfed", true);
+        }
+        // Bamboo end
     }
 
     @Override
@@ -693,7 +765,14 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         if (nbt.contains("AssignProfessionWhenSpawned")) {
             this.assignProfessionWhenSpawned = nbt.getBoolean("AssignProfessionWhenSpawned");
         }
-
+        // Bamboo start
+        if (nbt.contains("Bamboo.Nerfed") && net.rocryn.bamboo.BambooConfig.villagerNerfEnabled) {
+            this.isNerfed = nbt.getBoolean("Bamboo.Nerfed");
+            if (this.level instanceof ServerLevel) {
+                this.refreshBrain((ServerLevel) this.level);
+            }
+        }
+        // Bamboo end
     }
 
     @Override
diff --git a/src/main/java/net/rocryn/bamboo/BambooConfig.java b/src/main/java/net/rocryn/bamboo/BambooConfig.java
index 2c8ca798ec4b93e2c4170ee347675bdd93bc31ae..514dd1ea912cdabd85701bc40e968072a831cb5e 100644
--- a/src/main/java/net/rocryn/bamboo/BambooConfig.java
+++ b/src/main/java/net/rocryn/bamboo/BambooConfig.java
@@ -142,4 +142,12 @@ public class BambooConfig {
 
     public static Boolean endermanSpawnerTeleport = true;
     private static void endermanSpawnerTeleport() { endermanSpawnerTeleport = getBoolean("mobs.hostile.enderman.teleport-if-spawned-via-spawner", endermanSpawnerTeleport); }
+
+    public static Boolean villagerNerfEnabled = false;
+    public static Boolean villagerNerfRequiresEmeraldBlock = false;
+    public static int villagerNerfCheck = 60;
+
+    private static void villagerNerfEnabled() { villagerNerfEnabled = getBoolean("mobs.passive.villager.nerf.enabled", villagerNerfEnabled); }
+    private static void villagerNerfRequiresEmeraldBlock() { villagerNerfRequiresEmeraldBlock = getBoolean("mobs.passive.villager.nerf.require-emerald-block-below", villagerNerfRequiresEmeraldBlock); }
+    private static void villagerNerfCheck() { villagerNerfCheck = getInt("mobs.passive.villager.nerf.check-interval", villagerNerfCheck); }
 }
