From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tencryn <41876297+Tencryn@users.noreply.github.com>
Date: Mon, 20 Dec 2021 03:18:22 +0000
Subject: [PATCH] Nerf Stuck Villagers


diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java b/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
index 4f75f2be7070d49c2c60866ad7146da19ab61652..566055c5c129bf11a09b21b8da2fcf980f7686a5 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
@@ -22,6 +22,7 @@ import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.MemoryStatus;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiType;
+import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.level.pathfinder.Path;
 
 public class AcquirePoi extends Behavior<PathfinderMob> {
@@ -87,7 +88,8 @@ public class AcquirePoi extends Behavior<PathfinderMob> {
                 return true;
             }
         };
-        Set<Pair<Holder<PoiType>, BlockPos>> set = poiManager.findAllClosestFirstWithType(this.poiType, predicate, entity.blockPosition(), 48, PoiManager.Occupancy.HAS_SPACE).limit(5L).collect(Collectors.toSet());
+        int radius = ((Villager)entity).isNerfed() ? 1 : 48;
+        Set<Pair<Holder<PoiType>, BlockPos>> set = poiManager.findAllClosestFirstWithType(this.poiType, predicate, entity.blockPosition(), radius, PoiManager.Occupancy.HAS_SPACE).limit(5L).collect(Collectors.toSet()); // Bamboo
         Path path = findPathToPois(entity, set);
         if (path != null && path.canReach()) {
             BlockPos blockPos = path.getTarget();
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java
index ba17618784b76384737e876d790eafe76a7cec8d..08ee0966157c69fe14255a3a1addc168e112de8b 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerGoalPackages.java
@@ -18,6 +18,20 @@ import net.minecraft.world.entity.npc.VillagerProfession;
 public class VillagerGoalPackages {
     private static final float STROLL_SPEED_MODIFIER = 0.4F;
 
+    public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getNerfedCorePackage(VillagerProfession profession, float speed) {
+        return ImmutableList.of(
+            Pair.of(0, new LookAtTargetSink(45, 90)),
+            Pair.of(0, new ValidateNearbyPoi(profession.heldJobSite(), MemoryModuleType.JOB_SITE)),
+            Pair.of(0, new ValidateNearbyPoi(profession.acquirableJobSite(), MemoryModuleType.POTENTIAL_JOB_SITE)),
+            //Pair.of(2, new PoiCompetitorScan(profession)),
+            Pair.of(3, new LookAndFollowTradingPlayerSink(speed)),
+            Pair.of(6, new AcquirePoi(profession.acquirableJobSite(), MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, true, Optional.empty())),
+            Pair.of(8, new YieldJobSite(speed)),
+            Pair.of(10, new AssignProfessionFromJobSite()),
+            Pair.of(10, new ResetProfession())
+        );
+    }
+
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getCorePackage(VillagerProfession profession, float speed) {
         return ImmutableList.of(Pair.of(0, new Swim(0.8F)), Pair.of(0, new InteractWithDoor()), Pair.of(0, new LookAtTargetSink(45, 90)), Pair.of(0, new VillagerPanicTrigger()), Pair.of(0, new WakeUp()), Pair.of(0, new ReactToBell()), Pair.of(0, new SetRaidStatus()), Pair.of(0, new ValidateNearbyPoi(profession.heldJobSite(), MemoryModuleType.JOB_SITE)), Pair.of(0, new ValidateNearbyPoi(profession.acquirableJobSite(), MemoryModuleType.POTENTIAL_JOB_SITE)), Pair.of(1, new MoveToTargetSink()), Pair.of(2, new PoiCompetitorScan(profession)), Pair.of(3, new LookAndFollowTradingPlayerSink(speed)), Pair.of(5, new GoToWantedItem(speed, false, 4)), Pair.of(6, new AcquirePoi(profession.acquirableJobSite(), MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, true, Optional.empty())), Pair.of(7, new GoToPotentialJobSite(speed)), Pair.of(8, new YieldJobSite(speed)), Pair.of(10, new AcquirePoi((holder) -> {
             return holder.is(PoiTypes.HOME);
@@ -58,6 +72,17 @@ public class VillagerGoalPackages {
         }, MemoryModuleType.MEETING_POINT)), Pair.of(3, new GateBehavior<>(ImmutableMap.of(), ImmutableSet.of(MemoryModuleType.INTERACTION_TARGET), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.RUN_ONE, ImmutableList.of(Pair.of(new TradeWithVillager(), 1)))), getFullLookBehavior(), Pair.of(99, new UpdateActivityFromSchedule()));
     }
 
+    public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getNerfedIdlePackage(VillagerProfession profession, float speed) {
+        return ImmutableList.of(
+            //Pair.of(2, new DoNothing(30, 60)),
+            Pair.of(3, new GiveGiftToHero(100)),
+            Pair.of(3, new SetLookAndInteract(EntityType.PLAYER, 4)),
+            Pair.of(3, new ShowTradesToPlayer(400, 1600)),
+            getMinimalLookBehavior(),
+            Pair.of(99, new UpdateActivityFromSchedule())
+        );
+    }
+
     public static ImmutableList<Pair<Integer, ? extends Behavior<? super Villager>>> getIdlePackage(VillagerProfession profession, float speed) {
         return ImmutableList.of(Pair.of(2, new RunOne<>(ImmutableList.of(Pair.of(InteractWith.of(EntityType.VILLAGER, 8, MemoryModuleType.INTERACTION_TARGET, speed, 2), 2), Pair.of(new InteractWith<>(EntityType.VILLAGER, 8, AgeableMob::canBreed, AgeableMob::canBreed, MemoryModuleType.BREED_TARGET, speed, 2), 1), Pair.of(InteractWith.of(EntityType.CAT, 8, MemoryModuleType.INTERACTION_TARGET, speed, 2), 1), Pair.of(new VillageBoundRandomStroll(speed), 1), Pair.of(new SetWalkTargetFromLookTarget(speed, 2), 1), Pair.of(new JumpOnBed(speed), 1), Pair.of(new DoNothing(30, 60), 1)))), Pair.of(3, new GiveGiftToHero(100)), Pair.of(3, new SetLookAndInteract(EntityType.PLAYER, 4)), Pair.of(3, new ShowTradesToPlayer(400, 1600)), Pair.of(3, new GateBehavior<>(ImmutableMap.of(), ImmutableSet.of(MemoryModuleType.INTERACTION_TARGET), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.RUN_ONE, ImmutableList.of(Pair.of(new TradeWithVillager(), 1)))), Pair.of(3, new GateBehavior<>(ImmutableMap.of(), ImmutableSet.of(MemoryModuleType.BREED_TARGET), GateBehavior.OrderPolicy.ORDERED, GateBehavior.RunningPolicy.RUN_ONE, ImmutableList.of(Pair.of(new VillagerMakeLove(), 1)))), getFullLookBehavior(), Pair.of(99, new UpdateActivityFromSchedule()));
     }
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 256e4d396c9fe0822f4006ef101f1a8f1fbd1d2a..1872b7a35d83f5def23af74816ff17976dfc505c 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -142,6 +142,8 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     private final int brainTickOffset; // Purpur
     private boolean isLobotomized = false; public boolean isLobotomized() { return this.isLobotomized; } // Purpur
     private int notLobotomizedCount = 0; // Purpur
+    private boolean isNerfed = false; public boolean isNerfed() { return this.isNerfed; } // Bamboo
+    private int notNerfedCount = 0; // Bamboo
 
     public Villager(EntityType<? extends Villager> entityType, Level world) {
         this(entityType, world, VillagerType.PLAINS);
@@ -241,6 +243,29 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
     // Purpur end
 
+    // Bamboo start
+    public boolean checkNerfed() {
+        int interval = net.rocryn.bamboo.BambooConfig.villagerNerfCheck;
+
+        if (this.notNerfedCount > 3) {
+            interval *= 2;
+        }
+
+        if ((this.level.getGameTime() + brainTickOffset) % interval == 0) {
+            // offset Y for short blocks like dirt_path/farmland
+            this.isNerfed = !canTravelFrom(new BlockPos(getX(), getY() + 0.0625D, getZ()));
+
+            if (this.isNerfed) {
+                this.notNerfedCount = 0;
+            } else {
+                this.notNerfedCount++;
+            }
+        }
+
+        return this.isNerfed;
+    }
+    // Bamboo end
+
     @Override
     public Brain<Villager> getBrain() {
         return (Brain<Villager>) super.getBrain(); // CraftBukkit - decompile error
@@ -278,14 +303,20 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
             brain.addActivityWithConditions(Activity.WORK, VillagerGoalPackages.getWorkPackage(villagerprofession, 0.5F, this.level.purpurConfig.villagerClericsFarmWarts), ImmutableSet.of(Pair.of(MemoryModuleType.JOB_SITE, MemoryStatus.VALUE_PRESENT))); // Purpur
         }
 
-        brain.addActivity(Activity.CORE, VillagerGoalPackages.getCorePackage(villagerprofession, 0.5F));
-        brain.addActivityWithConditions(Activity.MEET, VillagerGoalPackages.getMeetPackage(villagerprofession, 0.5F), ImmutableSet.of(Pair.of(MemoryModuleType.MEETING_POINT, MemoryStatus.VALUE_PRESENT)));
-        brain.addActivity(Activity.REST, VillagerGoalPackages.getRestPackage(villagerprofession, 0.5F));
-        brain.addActivity(Activity.IDLE, VillagerGoalPackages.getIdlePackage(villagerprofession, 0.5F));
-        brain.addActivity(Activity.PANIC, VillagerGoalPackages.getPanicPackage(villagerprofession, 0.5F));
-        brain.addActivity(Activity.PRE_RAID, VillagerGoalPackages.getPreRaidPackage(villagerprofession, 0.5F));
-        brain.addActivity(Activity.RAID, VillagerGoalPackages.getRaidPackage(villagerprofession, 0.5F));
-        brain.addActivity(Activity.HIDE, VillagerGoalPackages.getHidePackage(villagerprofession, 0.5F));
+        if (!this.isNerfed) {
+            brain.addActivity(Activity.CORE, VillagerGoalPackages.getCorePackage(villagerprofession, 0.5F));
+            brain.addActivityWithConditions(Activity.MEET, VillagerGoalPackages.getMeetPackage(villagerprofession, 0.5F), ImmutableSet.of(Pair.of(MemoryModuleType.MEETING_POINT, MemoryStatus.VALUE_PRESENT)));
+            brain.addActivity(Activity.REST, VillagerGoalPackages.getRestPackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.IDLE, VillagerGoalPackages.getIdlePackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.PANIC, VillagerGoalPackages.getPanicPackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.PRE_RAID, VillagerGoalPackages.getPreRaidPackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.RAID, VillagerGoalPackages.getRaidPackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.HIDE, VillagerGoalPackages.getHidePackage(villagerprofession, 0.5F));
+        } else {
+            brain.addActivity(Activity.CORE, VillagerGoalPackages.getNerfedCorePackage(villagerprofession, 0.5F));
+            brain.addActivity(Activity.IDLE, VillagerGoalPackages.getNerfedIdlePackage(villagerprofession, 0.5F));
+        }
+
         brain.setCoreActivities(ImmutableSet.of(Activity.CORE));
         brain.setDefaultActivity(Activity.IDLE);
         brain.setActiveActivityIfPossible(Activity.IDLE);
@@ -344,6 +375,13 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
             this.isLobotomized = false;
         }
 
+        // Bamboo start
+        if (net.rocryn.bamboo.BambooConfig.villagerNerfEnabled && this.isNerfed != this.checkNerfed()) {
+            if (this.level instanceof ServerLevel) {
+                this.refreshBrain((ServerLevel) this.level);
+            }
+        }
+        // Bamboo end
         boolean tick = (level.getGameTime() + brainTickOffset) % level.purpurConfig.villagerBrainTicks == 0;
         if (((ServerLevel) level).getServer().lagging ? tick : level.purpurConfig.villagerUseBrainTicksOnlyWhenLagging || tick)
         // Purpur end
@@ -645,7 +683,11 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         if (this.assignProfessionWhenSpawned) {
             nbt.putBoolean("AssignProfessionWhenSpawned", true);
         }
-
+        // Bamboo start
+        if (this.isNerfed) {
+            nbt.putBoolean("Bamboo.Nerfed", true);
+        }
+        // Bamboo end
     }
 
     @Override
@@ -685,7 +727,14 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         if (nbt.contains("AssignProfessionWhenSpawned")) {
             this.assignProfessionWhenSpawned = nbt.getBoolean("AssignProfessionWhenSpawned");
         }
-
+        // Bamboo start
+        if (nbt.contains("Bamboo.Nerfed") && net.rocryn.bamboo.BambooConfig.villagerNerfEnabled) {
+            this.isNerfed = nbt.getBoolean("Bamboo.Nerfed");
+            if (this.level instanceof ServerLevel) {
+                this.refreshBrain((ServerLevel) this.level);
+            }
+        }
+        // Bamboo end
     }
 
     @Override
diff --git a/src/main/java/net/rocryn/bamboo/BambooConfig.java b/src/main/java/net/rocryn/bamboo/BambooConfig.java
index 2c8ca798ec4b93e2c4170ee347675bdd93bc31ae..756825f65117a1931a0f68b122f30a9602efecaf 100644
--- a/src/main/java/net/rocryn/bamboo/BambooConfig.java
+++ b/src/main/java/net/rocryn/bamboo/BambooConfig.java
@@ -142,4 +142,10 @@ public class BambooConfig {
 
     public static Boolean endermanSpawnerTeleport = true;
     private static void endermanSpawnerTeleport() { endermanSpawnerTeleport = getBoolean("mobs.hostile.enderman.teleport-if-spawned-via-spawner", endermanSpawnerTeleport); }
+
+    public static Boolean villagerNerfEnabled = false;
+    public static int villagerNerfCheck = 60;
+
+    private static void villagerNerfEnabled() { villagerNerfEnabled = getBoolean("mobs.passive.villager.nerf.enabled", villagerNerfEnabled); }
+    private static void villagerNerfCheck() { villagerNerfCheck = getInt("mobs.passive.villager.nerf.check-interval", villagerNerfCheck); }
 }
