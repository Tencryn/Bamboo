From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tencryn <41876297+Tencryn@users.noreply.github.com>
Date: Thu, 11 Nov 2021 03:16:07 +0000
Subject: [PATCH] Bamboo Config


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 52197656e46fd159240a936fe13bfb27f2b4e9a7..bfde30bf7e0be01847bfd31744fc450810ecc882 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -231,7 +231,8 @@ public class TimingsExport extends Thread {
             pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)),
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)),
-            pair("purpur", mapAsJSON(Bukkit.spigot().getPurpurConfig(), null))
+            pair("purpur", mapAsJSON(Bukkit.spigot().getPurpurConfig(), null)),
+            pair("bamboo", mapAsJSON(Bukkit.spigot().getBambooConfig(), null)) // Bamboo
             // Purpur end
         ));
 
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 9412a238aa3538bf958cf3b5ce2be5a9beead90f..eb829c0cab3c685f2d33946f64d8d15043891af0 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -241,6 +241,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         io.papermc.paper.util.ObfHelper.INSTANCE.getClass(); // load mappings for stacktrace deobf and etc.
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
+        // Bamboo start
+        try {
+            net.rocryn.bamboo.BambooConfig.init((java.io.File) options.valueOf("bamboo-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        // Bamboo end
 
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
diff --git a/src/main/java/net/rocryn/bamboo/BambooConfig.java b/src/main/java/net/rocryn/bamboo/BambooConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..61187b99639193ecf9b321286eed3e964110fa7b
--- /dev/null
+++ b/src/main/java/net/rocryn/bamboo/BambooConfig.java
@@ -0,0 +1,148 @@
+package net.rocryn.bamboo;
+
+import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableMap;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+@SuppressWarnings("unused")
+public class BambooConfig {
+    private static final String HEADER = "This is the main configuration file for Bamboo.\n";
+    private static File CONFIG_FILE;
+    public static YamlConfiguration config;
+
+    static int version;
+    static boolean verbose;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignore) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load bamboo.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+
+        readConfig(BambooConfig.class, null);
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            log(Level.INFO, s);
+        }
+    }
+
+    protected static void log(Level level, String s) {
+        Bukkit.getLogger().log(level, s);
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    static Map<String, Object> getMap(String path, Map<String, Object> def) {
+        if (def != null && config.getConfigurationSection(path) == null) {
+            config.addDefault(path, def);
+            return def;
+        }
+        return toMap(config.getConfigurationSection(path));
+    }
+
+    private static Map<String, Object> toMap(ConfigurationSection section) {
+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();
+        if (section != null) {
+            for (String key : section.getKeys(false)) {
+                Object obj = section.get(key);
+                if (obj != null) {
+                    builder.put(key, obj instanceof ConfigurationSection val ? toMap(val) : obj);
+                }
+            }
+        }
+        return builder.build();
+    }
+
+    public static String brandName = "Bamboo";
+    private static void brandName() {
+        brandName = getString("brand-name", brandName);
+    }
+
+    public static Boolean preserveFuel = false;
+    private static void preserveFuel() { preserveFuel = getBoolean("furnaces.preserve-fuel", preserveFuel); }
+
+    public static Integer monsterSpawnLightLevel = 0;
+    private static void hostileSpawnLightLevel() { monsterSpawnLightLevel = getInt("monsters.spawn-light-level", monsterSpawnLightLevel); }
+
+    public static Boolean endermanSpawnerTeleport = true;
+    private static void endermanSpawnerTeleport() { endermanSpawnerTeleport = getBoolean("monsters.enderman.teleport-if-spawned-via-spawner", endermanSpawnerTeleport); }
+
+    public static Boolean sheepGriefGrass = true;
+    private static void sheepGriefGrass() { sheepGriefGrass = getBoolean("animals.sheep.grief-grass", sheepGriefGrass); }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index c665aee9fbd5d70d001b8829d61731cc647e4cd9..9e2193500d5f09dc443f7b366206760e2022494f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -932,6 +932,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
         org.purpurmc.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        net.rocryn.bamboo.BambooConfig.init((File) console.options.valueOf("bamboo-settings")); // Bamboo
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -2677,6 +2678,11 @@ public final class CraftServer implements Server {
         }
         // Purpur end
 
+        // Bamboo start
+        @Override
+        public YamlConfiguration getBambooConfig() { return net.rocryn.bamboo.BambooConfig.config; }
+        // Bamboo end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 6f14a1b26e92d0170538ed60c6a651a031e7209e..13a7eb23518b3ee1a6ccb792dc2d40f0547322c8 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -161,6 +161,14 @@ public class Main {
                     .describedAs("Yml file");
                 // Purpur end
 
+                // Bamboo start
+                acceptsAll(asList("bamboo", "bamboo-settings"), "File for Bamboo settings")
+                    .withRequiredArg()
+                    .ofType(File.class)
+                    .defaultsTo(new File("bamboo.yml"))
+                    .describedAs("Yml file");
+                // Bamboo end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
